# Tests vermockgen with test packages.
# golden files are under testdata

vermockgen

cmpenv stdout testdata/stdout

cmpenv stderr testdata/stderr

cmp vermock_gen_test.go testdata/vermock_gen_test.go

-- testdata/stdout --
-- testdata/stderr --
vermockgen: example.com_test: wrote $WORK/vermock_gen_test.go
-- cache.go --
package cache

type Cache interface {
	Put(key string, value any) error
	Get(key string) (value any, ok bool)
	Delete(string)
	Load(...string)
}
-- go.mod --
module example.com

go 1.20
-- mock_test.go --
//go:build vermockstub

package cache_test

import (
	. "example.com"
)

type mockCache struct {
	Cache
}
-- testdata/vermock_gen_test.go --
// Code generated by vermockgen. DO NOT EDIT.

//go:generate go run -mod=mod github.com/Versent/go-vermock/cmd/vermockgen
//go:build !vermockstub
// +build !vermockstub

package cache_test

import (
	vermock "github.com/Versent/go-vermock"
	testing "testing"
)

import (
	. "example.com"
)

var _ Cache = (*mockCache)(nil)

func ExpectDelete(delegate func(_ testing.TB, v0 string)) func(*mockCache) {
	return vermock.Expect[mockCache]("Delete", delegate)
}

func ExpectManyDelete(delegate func(_ testing.TB, _ vermock.CallCount, v0 string)) func(*mockCache) {
	return vermock.ExpectMany[mockCache]("Delete", delegate)
}

func (m *mockCache) Delete(v0 string) {
	vermock.Call0(m, "Delete", v0)
}

func ExpectGet(delegate func(_ testing.TB, key string) (value any, ok bool)) func(*mockCache) {
	return vermock.Expect[mockCache]("Get", delegate)
}

func ExpectManyGet(delegate func(_ testing.TB, _ vermock.CallCount, key string) (value any, ok bool)) func(*mockCache) {
	return vermock.ExpectMany[mockCache]("Get", delegate)
}

func (m *mockCache) Get(key string) (value any, ok bool) {
	return vermock.Call2[any, bool](m, "Get", key)
}

func ExpectLoad(delegate func(_ testing.TB, v0 []string)) func(*mockCache) {
	return vermock.Expect[mockCache]("Load", delegate)
}

func ExpectManyLoad(delegate func(_ testing.TB, _ vermock.CallCount, v0 []string)) func(*mockCache) {
	return vermock.ExpectMany[mockCache]("Load", delegate)
}

func (m *mockCache) Load(v0 ...string) {
	vermock.Call0(m, "Load", v0)
}

func ExpectPut(delegate func(_ testing.TB, key string, value any) error) func(*mockCache) {
	return vermock.Expect[mockCache]("Put", delegate)
}

func ExpectManyPut(delegate func(_ testing.TB, _ vermock.CallCount, key string, value any) error) func(*mockCache) {
	return vermock.ExpectMany[mockCache]("Put", delegate)
}

func (m *mockCache) Put(key string, value any) error {
	return vermock.Call1[error](m, "Put", key, value)
}

type mockCache struct {
	_ byte // prevent zero-size struct
}
