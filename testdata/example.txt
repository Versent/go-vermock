# Complete example usage of vermockgen.
#
# For a description of this format see https://pkg.go.dev/golang.org/x/tools/txtar and https://pkg.go.dev/rsc.io/script@v0.0.1#hdr-Script_Language.

# Setup module.
exec go mod edit -replace github.com/Versent/go-vermock=$MUT
exec go mod tidy

# Run vermockgen.
exec vermockgen

# Run go test and strip out elapsed time and coverage data.
go-test -v

# Compare with expected output
cmpenv stdout testdata/stdout
cmpenv stderr testdata/stderr

-- go.mod --
module example.com

go 1.20
-- example.go --
package example

// Cache contains a variety of methods with different signatures.
type Cache interface {
	Put(string, any) error
	Get(string) (any, bool)
	Delete(string)
	Load(...string)
}
-- mock_test.go --
//go:build vermockstub

package example_test

import (
	eg "example.com"
)

type mockCache struct {
	eg.Cache
}

// UnusedCache is useful to show that a test's intent is that none of the
// interface methods are called.
var UnusedCache func(*mockCache) = nil
-- example_test.go --
// To avoid problems when generating vermockgen code after the tests are
// defined, use buildtags to hide this file from the generator.
// Alternatively, just ensure the vermockgen code is generated before writing
// your tests (and don't forget to commit it to your SCM system).
//go:build !vermockstub

package example_test

import (
	"fmt"
	"testing"

	vermock "github.com/Versent/go-vermock"

	eg "example.com"
)

func TestUnusedCache(t *testing.T) {
	// 1. Create a mock object.
	var cache eg.Cache = vermock.New(t, UnusedCache)
	// 2. Use the mock object in your code under test.
	// 3. Assert that all expected methods were called.
	vermock.AssertExpectedCalls(t, cache)
}

func TestPass(t *testing.T) {
	// 1. Create a mock object with expected calls.
	var cache eg.Cache = vermock.New(t,
		// delegate function can receive testing.TB
		vermock.Expect[mockCache]("Get", func(t testing.TB, key string) (any, bool) {
			return "bar", true
		}),
		vermock.Expect[mockCache]("Put", func(t testing.TB, key string, value any) error {
			return nil
		}),
		// or only the method arguments
		vermock.Expect[mockCache]("Delete", func(key string) {}),
		// you may prefer to define a helper function
		ExpectDelete(func(t testing.TB, key string) {}),
	)
	// 2. Use the mock object in your code under test.
	cache.Put("foo", "bar")
	cache.Get("foo")
	cache.Delete("foo")
	cache.Delete("foo")
	// 3. Assert that all expected methods were called.
	vermock.AssertExpectedCalls(t, cache)
}

func TestUnmetExpectation(t *testing.T) {
	// 1. Create a mock object with expected calls.
	var cache eg.Cache = vermock.New(t,
		// delegate function can receive testing.TB
		vermock.Expect[mockCache]("Put", func(t testing.TB, key string, value any) error {
			fmt.Println("put", key, value)
			return nil
		}),
		// or *testing.T
		vermock.Expect[mockCache]("Get", func(t *testing.T, key string) (any, bool) {
			fmt.Println("get", key)
			return "bar", true
		}),
		// or only the method arguments
		vermock.Expect[mockCache]("Delete", func(key string) {
			fmt.Println("delete", key)
		}),
		// you may prefer to define a helper function
		ExpectDelete(func(t testing.TB, key string) {
			t.Log("this is not going to be called; causing t.Fail() to be called by vermock.AssertExpectedCalls")
		}),
	)
	// 2. Use the mock object in your code under test.
	cache.Put("foo", "bar")
	cache.Get("foo")
	cache.Delete("foo")
	// 3. Assert that all expected methods were called.
	vermock.AssertExpectedCalls(t, cache)
}

func TestUnexpectedCall(t *testing.T) {
	// 1. Create a mock object with expected calls.
	var cache eg.Cache = vermock.New(t,
		// delegate function can receive testing.TB
		vermock.Expect[mockCache]("Put", func(t testing.TB, key string, value any) error {
			fmt.Println("put", key, value)
			return nil
		}),
		// or only the method arguments
		vermock.Expect[mockCache]("Delete", func(key string) {
			fmt.Println("delete", key)
		}),
	)
	// 2. Use the mock object in your code under test.
	cache.Put("foo", "bar")
	cache.Get("foo")
	cache.Delete("foo")
	// 3. Assert that all expected methods were called.
	vermock.AssertExpectedCalls(t, cache)
}

func TestAllowRepeatedCalls(t *testing.T) {
	// 1. Create a mock object with ExpectMany.
	var cache eg.Cache = vermock.New(t,
		// delegate function may receive a call counter and the method arguments
		vermock.ExpectMany[mockCache]("Load", func(n vermock.CallCount, keys ...string) {
			fmt.Println("load", n, keys)
		}),
		// and testing.TB
		vermock.ExpectMany[mockCache]("Load", func(t testing.TB, n vermock.CallCount, keys ...string) {
			fmt.Println("load", n, keys)
		}),
		// or *testing.T
		vermock.ExpectMany[mockCache]("Load", func(t *testing.T, n vermock.CallCount, keys ...string) {
			fmt.Println("load", n, keys)
		}),
		// or only testing.TB/*testing.T
		vermock.ExpectMany[mockCache]("Load", func(t testing.TB, keys ...string) {
			fmt.Println("load 3", keys)
		}),
		// or only the method arguments
		vermock.ExpectMany[mockCache]("Load", func(keys ...string) {
			fmt.Println("load 4", keys)
		}),
	)
	// 2. Use the mock object in your code under test.
	cache.Load("foo", "bar")
	cache.Load("baz")
	cache.Load("foo")
	cache.Load("bar")
	cache.Load("baz")
	cache.Load("foo", "bar", "baz")
	// 3. Assert that all expected methods were called.
	vermock.AssertExpectedCalls(t, cache)
}

func TestOrderedCalls(t *testing.T) {
	// 1. Create a mock object with ExpectInOrder.
	var cache eg.Cache = vermock.New(t,
		vermock.ExpectInOrder(
			vermock.Expect[mockCache]("Put", func(key string, value any) error {
				fmt.Println("put", key, value)
				return nil
			}),
			vermock.Expect[mockCache]("Get", func(key string) (any, bool) {
				fmt.Println("get", key)
				return "bar", true
			}),
		),
	)
	// 2. Use the mock object in your code under test.
	cache.Get("foo")
	cache.Put("foo", "bar")
	// 3. Assert that all expected methods were called.
	vermock.AssertExpectedCalls(t, cache)
}

func TestMixedOrderedCalls(t *testing.T) {
	// 1. Create a mock object with ExpectInOrder.
	get := vermock.Expect[mockCache]("Get", func(key string) (any, bool) {
		return "bar", true
	})
	put := vermock.Expect[mockCache]("Put", func(key string, value any) error {
		return nil
	})
	var cache eg.Cache = vermock.New(t,
		get, put,
		vermock.ExpectInOrder(put, get),
		get, put,
	)
	// 2. Use the mock object in your code under test.
	for i := 0; i < 3; i++ {
		cache.Put(fmt.Sprint("foo", i), "bar")
		cache.Get(fmt.Sprint("foo", i))
	}
	// 3. Assert that all expected methods were called.
	vermock.AssertExpectedCalls(t, cache)
}
-- testdata/stderr --
-- testdata/stdout --
=== RUN   TestUnusedCache
--- PASS: TestUnusedCache
=== RUN   TestPass
    vermock_gen_test.go:65: call to Put: 0/0
    vermock_gen_test.go:41: call to Get: 0/0
    vermock_gen_test.go:29: call to Delete: 0/0
    vermock_gen_test.go:29: call to Delete: 1/0
--- PASS: TestPass
=== RUN   TestUnmetExpectation
    vermock_gen_test.go:65: call to Put: 0/0
put foo bar
    vermock_gen_test.go:41: call to Get: 0/0
get foo
    vermock_gen_test.go:29: call to Delete: 0/0
delete foo
    example_test.go:77: failed to make call to Delete: only got one call
--- FAIL: TestUnmetExpectation
=== RUN   TestUnexpectedCall
    vermock_gen_test.go:65: call to Put: 0/0
put foo bar
    vermock_gen_test.go:41: unexpected call to Get
    vermock_gen_test.go:29: call to Delete: 0/0
delete foo
--- FAIL: TestUnexpectedCall
=== RUN   TestAllowRepeatedCalls
    vermock_gen_test.go:53: call to Load: 0/0
load 0 [foo bar]
    vermock_gen_test.go:53: call to Load: 1/0
load 1 [baz]
    vermock_gen_test.go:53: call to Load: 2/0
load 2 [foo]
    vermock_gen_test.go:53: call to Load: 3/0
load 3 [bar]
    vermock_gen_test.go:53: call to Load: 4/0
load 4 [baz]
    vermock_gen_test.go:53: call to Load: 5/0
load 4 [foo bar baz]
--- PASS: TestAllowRepeatedCalls
=== RUN   TestOrderedCalls
    vermock_gen_test.go:41: out of order call to Get: expected 2, got 1
    vermock_gen_test.go:41: call to Get: 0/1
get foo
    vermock_gen_test.go:65: out of order call to Put: expected 1, got 2
    vermock_gen_test.go:65: call to Put: 0/2
put foo bar
--- FAIL: TestOrderedCalls
=== RUN   TestMixedOrderedCalls
    vermock_gen_test.go:65: call to Put: 0/0
    vermock_gen_test.go:41: call to Get: 0/0
    vermock_gen_test.go:65: call to Put: 1/1
    vermock_gen_test.go:41: call to Get: 1/2
    vermock_gen_test.go:65: call to Put: 2/2
    vermock_gen_test.go:41: call to Get: 2/2
--- PASS: TestMixedOrderedCalls
exit status 1
